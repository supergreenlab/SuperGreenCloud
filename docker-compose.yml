version: '3.1'

volumes:
    prometheus_data: {}
    grafana_data: {}
    redis_data: {}
    postgres_data: {}
    mosquitto_data: {}
    docker_gen: {}
    minio_data: {}
    nginx_logs: {}

networks:
  front-tier:
  back-tier:

services:

  prometheus:
    image: prom/prometheus
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=12w'
      - '--web.enable-admin-api'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    links:
      - cadvisor:cadvisor
    # - alertmanager:alertmanager
    depends_on:
      - cadvisor
    networks:
      - back-tier
    restart: always

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points'
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    networks:
      - back-tier
    restart: always

#  alertmanager:
#    image: prom/alertmanager
#    volumes:
#      - ./config/alertmanager:/etc/alertmanager
#    networks:
#      - back-tier
#    restart: always
#    command:
#      - '--config.file=/etc/alertmanager/config.yml'
#      - '--storage.path=/alertmanager'

  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - back-tier
    restart: always

  prometheus-nginxlog-exporter:
    image: quay.io/martinhelmich/prometheus-nginxlog-exporter
    restart: always
    command:
      - '/nginx_logs/access.log'
    volumes:
      - nginx_logs:/nginx_logs
    networks:
      - back-tier

  grafana:
    image: grafana/grafana
    # user: "104"
    environment:
      - VIRTUAL_HOST=${GRAFANA_HOST}
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    env_file:
      - ./config/grafana/config.monitoring
    networks:
      - back-tier
    restart: always

  nginx:
    image: nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - docker_gen:/etc/nginx/conf.d
      - ./config/nginx/htpasswd:/etc/nginx/htpasswd
      - ./config/nginx/certs:/etc/nginx/certs
      - ./config/nginx/vhost.d:/etc/nginx/vhost.d
      - nginx_logs:/nginx_logs
    networks:
      - front-tier
      - back-tier

  dockergen:
    image: jwilder/docker-gen
    command: -notify-sighup nginx -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
    volumes:
      - docker_gen:/etc/nginx/conf.d
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./config/nginx/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl
      - ./config/nginx/htpasswd:/etc/nginx/htpasswd
      - ./config/nginx/certs:/etc/nginx/certs
      - ./config/nginx/vhost.d:/etc/nginx/vhost.d
    networks:
      - front-tier
      - back-tier
    depends_on:
      - nginx

  redis:
    image: redis
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - back-tier

  postgres:
    image: postgres
    shm_size: 1g
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - back-tier

  mqtt:
    image: eclipse-mosquitto
    restart: always
    ports:
      - 1883:1883
    networks:
      - back-tier
      - front-tier
    volumes:
      - ./config/mosquitto:/mosquitto/config
      - mosquitto_data:/mosquitto/data

  minio:
    image: minio/minio
    restart: always
    environment:
      - VIRTUAL_HOST=${MINIO_HOST}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
    command: server /data
    networks:
      - back-tier
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3


# HTTP Services

  update:
    image: nginx
    environment:
      - VIRTUAL_HOST=${UPDATE_HOST},${SSLUPDATE_HOST}
    volumes:
      - ./www/update:/usr/share/nginx/html
    networks:
      - back-tier

  controller:
    image: nginx
    environment:
      - VIRTUAL_HOST=${CONTROLLER_HOST}
    volumes:
      - ./www/controller:/usr/share/nginx/html
    networks:
      - back-tier

  live:
    image: nginx
    environment:
      - VIRTUAL_HOST=${LIVE_HOST}
    volumes:
      - ./www/live:/usr/share/nginx/html
    networks:
      - back-tier

  livecam:
    image: supergreenlab/livecam
    environment:
      - VIRTUAL_HOST=${LIVECAM_HOST}
    networks:
      - back-tier
    volumes:
      - ./config/livecam:/etc/livecam
    restart: always

  upgrader:
    image: nginx
    environment:
      - VIRTUAL_HOST=${UPGRADER_HOST}
    volumes:
      - ./www/upgrader:/usr/share/nginx/html
    networks:
      - back-tier


# Backend

  mqttparser:
    image: supergreenlab/mqttparser
    depends_on:
      - redis
      - mqtt
    networks:
      - back-tier
    volumes:
      - ./config/mqttparser:/etc/mqttparser
    restart: always

  appbackend:
    image: supergreenlab/appbackend
    environment:
      - VIRTUAL_PORT=8080
      - VIRTUAL_HOST=${APPBACKEND_HOST}
    depends_on:
      - prometheus
    networks:
      - back-tier
    volumes:
      - ./config/appbackend:/etc/appbackend
    restart: always

  webbackend:
    image: supergreenlab/webbackend
    environment:
      - VIRTUAL_HOST=${WEBBACKEND_HOST}
    networks:
      - back-tier
    volumes:
      - ./config/webbackend:/etc/webbackend
    restart: always

  towelie:
    image: supergreenlab/towelie
    environment:
      - VIRTUAL_HOST=${TOWELIE_HOST}
    networks:
      - back-tier
    volumes:
      - ./config/towelie:/etc/towelie
    restart: always

  tipbackend:
    image: supergreenlab/tipbackend
    environment:
      - VIRTUAL_HOST=${TIPBACKEND_HOST}
    networks:
      - back-tier
    volumes:
      - ./config/tipbackend:/etc/tipbackend
    restart: always

# Legacy Backend

  supergreenpromproxy:
    image: supergreenlab/supergreenpromproxy
    environment:
      - VIRTUAL_HOST=${SUPERGREENPROMPROXY_HOST}
    depends_on:
      - prometheus
    networks:
      - back-tier
    restart: always

  discord:
    image: supergreenlab/supergreendiscordcommunity              
    env_file:
      - ./config/discord/env
    environment:
      - VIRTUAL_HOST=${DISCORD_HOST}
    networks:
      - back-tier
